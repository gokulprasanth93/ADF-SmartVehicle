{
	"name": "pl_vehicle_raw",
	"properties": {
		"activities": [
			{
				"name": "blob to adls",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "ds_vehicele_raw",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_landing_raw",
						"type": "DatasetReference",
						"parameters": {
							"LandingFolder": {
								"value": "@concat('landing','/',formatDateTime(utcNow(), 'yyyy'),'/', formatDateTime(utcNow(), 'MM'),'/', formatDateTime(utcNow(), 'dd'), '/')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Get Metadata vehicle",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "blob to adls",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_vehicele_raw",
						"type": "DatasetReference"
					},
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "JsonReadSettings"
					}
				}
			},
			{
				"name": "If file exsist",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata vehicle",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Get Metadata vehicle').output.exists",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Failed",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": "File not found",
								"errorCode": "505"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Copy data to staging",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"wildcardFileName": "*.json",
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_json_landing",
									"type": "DatasetReference",
									"parameters": {
										"FileNameOutput": {
											"value": "@concat('landing','/',formatDateTime(utcNow(), 'yyyy'),'/', formatDateTime(utcNow(), 'MM'),'/', formatDateTime(utcNow(), 'dd'), '/')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_json_staging",
									"type": "DatasetReference",
									"parameters": {
										"stagingFilePath": {
											"value": "@concat('staging','/',formatDateTime(utcNow(), 'yyyy'),'/', formatDateTime(utcNow(), 'MM'),'/', formatDateTime(utcNow(), 'dd'), '/')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Copy data to staging",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"wildcardFileName": "*.json",
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_json_staging",
									"type": "DatasetReference",
									"parameters": {
										"stagingFilePath": {
											"value": "@concat('staging','/',formatDateTime(utcNow(), 'yyyy'),'/', formatDateTime(utcNow(), 'MM'),'/', formatDateTime(utcNow(), 'dd'), '/')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_staging_sql_vehicle",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2023-05-10T12:22:23Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}